[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools",
]

[project]
name = "ruff-pre-commit"
version = "0.0.0"
description = "Run the Ruff formatter on Python code blocks in documentation files."
readme = "README.md"
requires-python = ">=3.9"
scripts.ruffen-docs = "ruffen_docs:main"
dependencies = [
  "ruff==0.8.4",
]

[project.optional-dependencies]
dev = [
  "packaging~=23.1",
  "urllib3>=2.0.5,<3.0.0",
]

[tool.coverage.report]
exclude_also = [
  "if TYPE_CHECKING",
]
fail_under = 100
omit = ["mirror.py"]
show_missing = true
skip_covered = true

[tool.coverage.run]
branch = true
parallel = true
source = [
  "ruffen_docs",
  "tests",
]

[tool.coverage.paths]
source = [
  "src",
]

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
strict = true
warn_unreachable = true

[tool.pytest.ini_options]
addopts = [
  "--no-cov-on-fail", # Do not report coverage if tests fail.
  "--strict-config", # Any warnings encountered while parsing the `pytest` section of the configuration file raise errors.
  "--strict-markers", # Require markers to be registered in the `markers` section below
]
filterwarnings = [
  "error", # Convert warnings to errors
]
python_files = "test_*.py"
testpaths = ["tests"]
xfail_strict = true

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
ignore = [
  "D106", # Requiring doc strings in subclasses results in duplicated doc strings
  "D401", # Ignore non-imperative mood in the first line of a doc string
  "FBT", # Ignore flake8-boolean-trap - Allow boolean default values
  "FIX002", # Items to be fixed should be marked as TODO
  "ISC001", # This is handled by the formatter  # "COM812",  # Note we are intentionally not disabling this rule to keep trailing commas being added
  "PLR0913", # Ignore too many arguments passed to a function
  "PLR2004", # Ignore magic value comparison
  "RUF012", # Ignore mutable class defaults check
  "S101", # Ignore assert statements
  "SIM108", # Don't suggest simplifying if statements as we can't check branch coverage
  "T201", # Allow print statements
  "TD002", # Don't require assignee for TODOs
  "TRY003",
]
select = ["ALL"] # Enable all ruff plugins
unfixable = [
  "ERA001", # Disable autofix for commented-out code
  "F401", # Disable autofix for unused imports
  "F841", # Disable autofix for unused variables
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"mock".msg = "Use unittest.mock."

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"**/*.ipynb" = [
  "D100", # Remove requirement for module level docstrings within notebooks
  "T201", # Allow print within notebooks
  "T203", # Allow pprint within notebooks
]
"*/tests/*" = [
  "PLC1901", # Ignore rule as we want to assert strings are empty in tests
  "S", # Ignore all bandit security related checks for tests
]
"__init__.py" = [
  "D104", # Ignore - "Missing docstring in public package" for init files
]

[tool.ruff.lint.pydocstyle]
convention = "google"
